fmod ARBOL is
	
	pr NAT .

	sort Arbol .

	op arbol-vacio : -> Arbol [ctor] .

	op arbol : Nat Arbol Arbol -> Arbol [ctor] .

	*** Operación mezcla para el arbol

	op mezcla : Nat Nat -> Nat .

	vars N1 N2 : Nat .

	eq mezcla(N1, N2) = N1 + N2 .

	*** Operación inserta para el arbol

	op inserta : Nat Arbol -> Arbol .

	vars Raiz Res Valor : Nat .
	vars Izq Der ResArbol : Arbol .

	eq inserta(Valor, arbol-vacio) = arbol(Valor, arbol-vacio, arbol-vacio) .

	ceq inserta(Valor, arbol(Raiz, Izq, Der)) = arbol(Raiz, inserta(Valor, Izq), Der) 
		if Valor < Raiz .

	ceq inserta(Valor, arbol(Raiz, Izq, Der)) = arbol(Raiz, Izq, inserta(Valor, Der)) 
		if Valor > Raiz .

	eq inserta(Raiz, arbol(Raiz, Izq, Der)) = arbol(mezcla(Raiz, Raiz), Izq, Der) .

	***Operación busca para el arbol

	op busca : Nat Arbol ~> Nat .

	eq busca(Valor, arbol-vacio) = 0 .

	eq busca(Raiz, arbol(Raiz, Izq, Der)) = Raiz .

	ceq busca(Valor, arbol(Raiz, Izq, Der)) = busca(Valor, Izq) 
		if Valor < Raiz .

	ceq busca(Valor, arbol(Raiz, Izq, Der)) = busca(Valor, Der) 
		if Valor > Raiz .

endfm

red inserta(3, 
	arbol(4, 
		arbol(2, 			*** izq
			arbol-vacio, 
			arbol-vacio), 
		arbol-vacio)) .    	*** der


red busca(2, 
	arbol(4, 
		arbol(2, 			*** izq
			arbol-vacio, 
			arbol-vacio), 
		arbol-vacio)) .    	*** der


red busca(1, 
	arbol(4, 
		arbol(2, 			*** izq
			arbol-vacio, 
			arbol-vacio), 
		arbol-vacio)) .    	*** der